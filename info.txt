Задание:

1. Реализуйте класс Товар, содержащий данные о товаре, и ТорговыйАвтомат, содержащий в себе методы
initProducts (List <Product>) сохраняющий в себе список исходных продуктов и getProduct(String name)

2. Реализуйте конструкторы, get/set методы

3. Сделайте класс Товар абстрактным , создайте несколько наследников (пример: БутылкаВоды), 
сделайте интерфейсом ТорговыйАвтомат и Реализуйте класс какого то одного типа ТорговыйАвтомат
(пример: ПродающийБутылкиВодыАвтомат)

4. Переопределите метод toString для Товара

5. Создайте перегруженный метод выдачи товара ТорговымАвтоматом дополнив доп. входным параметром
Создайте метод возвращающий товар по имени и какому либо параметру товара getProduct(String name, int volume)



ДЗ:
1. Создать наследника класса Продукта - ГорячийНапиток с доп.полем int температура
2. Создать класс АвтоматГорячихНапитков, наследника класса Торговый автомат
и реализовать перегруженный метод getProduct(String name, int volume, int temperature)
выдающий продукт соответствующий имени, объему и температуре
3. В main проинициализировать несколько ГорячихНапитков и АвторматГорячихНапитков и
воспроизвести логику заложенную в программе
4. Следовать принципам ООП






Конспект:
папка/пакет, в котором храняться наследники, к примеру для класса Animal, наследниками будут Cat, Dog
вот эти классы нужно хранить в папке impl (implementation)



4 основных принципа ООП:
1. Абстракция - какой то шаблон, описание, матрица объекта из реального мира на объект кода
2. Наследование - когда мы можем расширить какой то класс и позаимствовать у него какие то методы
Пример Cat extends Animal
3. Полиморфизм - переопределение методов (напимер toString, equals, hashCode)
и так же, полиморфизм - это когда мы пишем Animal cat = new Cat
4. Инкапсуляция - видимость полей, то есть когда мы в классе скрываем какие то параметры, методы 
и наружу отдаем только то что нужно 